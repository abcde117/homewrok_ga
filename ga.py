# -*- coding: utf-8 -*-
"""2122083潘雪龍ga課題.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzClEjWLU2KNWau-TRyumj12r3PPBta6
"""

import copy
import numpy as np
import random
def importance(q_size):
   importance = np.random.uniform(0, 1, q_size)
   importance /= importance.sum()
   return importance
def self_check_indival(diff):
   l=[]
   for i in diff:
     if(i<=0):
        l.append(0)
     else:
        l.append(np.random.choice([0, 1]))
   return  np.array(l)
def self_check_total(students,textbook):
   l=[]
   mean_ablity=np.mean(students,axis=1)
   for i in mean_ablity:
     diff=(i-textbook)/10
     ll=self_check_indival(diff)
     l.append(ll)
   return np.array(l)

def question_anser_indival(diff,q_size):
  if(diff<=0):
     p=max(0,0.5+diff)
     return np.random.choice([0,1],q_size,p=[1-p,p])
  p=min(1,0.5+diff)
  return  np.random.choice([0,1],q_size,p=[1-p,p])

def question_anser_total(mean_ablity, q_size,textbook):
    l = []
    for i in range(len(mean_ablity)):  # Iterate using index
        diff = (mean_ablity[i] - textbook) / 10  # Calculate diff for each student
        ll = []
        for j in range(len(diff)):  # Iterate through each subject
            ll.append(question_anser_indival(diff[j], q_size))  # Pass single diff value
        l.append(np.array(ll))
    return np.array(l)

def fittness_func(prior,question_anser,question_importance,students):
     fittness=prior*0.35+0.5*(question_anser@question_importance)+0.15*(students/10)
     k=np.exp(-np.abs(prior-np.sum(question_anser,axis=2)/10)*students)
     fitness=fittness*k
     return fittness

def selection(students,textbook,fitness):
  diff=students-textbook.reshape(1,-1)
  prior=np.exp(-0.5*(diff/np.std(diff))**2)
  likelihoods=np.exp(-0.1*fitness)
  posterior = prior*likelihoods
  posterior=(posterior)/np.sum(posterior,axis=1).reshape(-1,1)

  return np.argmax(posterior,axis=1)

def update_ablity_peronal(students,textbook,weight,study_gain):
    delta=((1-(students-textbook)*weight)*(np.sum(study_gain,axis=1).reshape(-1,1))/10)*1.5
    delta=np.where(delta>=10, 10,delta)
    return students+delta


def crossover_personal(student1,student2,weight,mean):
    return weight[0]*student1+weight[1]*student2+weight[2]*mean
def crossover_total(students,mean,weight):
       crossover_count = np.random.randint(1,8)

       for _ in range(crossover_count):
           parent=np.random.choice(range(len(students)),2)
           students[parent[0]]=crossover_personal(students[parent[0]],students[parent[1]],weight,mean)
           students[parent[1]]=crossover_personal(students[parent[1]],students[parent[0]],weight,mean)
       return students


def mutation_person(student,text_book):
    divi=(student -text_book)
    mutation_prob = 0.2* np.exp(-0.1 * np.abs(divi))
    if (np.random.random() < mutation_prob).any():
        student+=np.random.normal(0,1)
    if  (np.random.random() < mutation_prob).any():
        student-=np.random.normal(0,1)

    noise=np.random.normal(0,0.5*np.abs(divi))
    student+=np.exp(-0.1*(np.abs(divi)+noise))*divi
    #student = np.clip(student, 0, 10)
    student=np.clip(student, 0, 10)
    return student

def mutation_total(students,text_book):
    for i in range(len(students)):
        students[i]=mutation_person(students[i],text_book)
    return students


def data_generation(students,size,textbook):
      mean_ablity=np.mean(students,axis=1)
      self_check=self_check_total(students,textbook)
      question_anser=question_anser_total(mean_ablity,size,textbook)
      return mean_ablity, self_check,question_anser
def print_chosen_result(selected_index):
    for i in range(len(selected_index)):
       print("学生"+"no"+str(i)+" "+"にno"+str(selected_index[i])+ "の本が"+"が選ばれました。")

def print_final_result(students):
     for i in range(len(students)):
        print(students[i])


def ga(students,textbook,generation):
  for i in range(generation):
        print(str(i + 1) + u"世代")
        mean_ablity, self_check,question_anser=data_generation(students,10,textbook)


        fitness=fittness_func(self_check,question_anser,importance(10),students)
        selected_index=selection(students,textbook,fitness)
        print_chosen_result(selected_index)
        study_gain=question_anser[np.arange(len(students)),selected_index,]
        up_students=update_ablity_peronal(students,textbook,importance(4),study_gain)

        cross_students=crossover_total(students,np.mean(students,axis=0),importance(3))
        mutated_students=mutation_total(cross_students,textbook)

        print_final_result(mutated_students)

def main():
    students=np.random.uniform(0, 10, (9,4))
    textbook=np.random.uniform(0, 10, 4)
    ga(students,textbook,10)

if __name__ == "__main__":
    main()